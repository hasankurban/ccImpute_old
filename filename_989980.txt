
R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)


R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)


R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)


R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.


R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)


R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.


R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.


R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.


R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.


R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.


R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)


R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.


R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)


R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.


R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.


R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> if (!requireNamespace("BiocManager", quietly = TRUE))
> if (!requireNamespace("BiocManager", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("BiocManager", quietly = TRUE))
+   install.packages("BiocManager")
+   install.packages("BiocManager")
> if (!requireNamespace("SC3", quietly = TRUE))
> if (!requireNamespace("SC3", quietly = TRUE))
+   BiocManager::install("SC3")
+   BiocManager::install("SC3")
> if (!requireNamespace("SC3", quietly = TRUE))
+   BiocManager::install("SC3")
> if (!requireNamespace("BiocManager", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("SC3", quietly = TRUE))
+   BiocManager::install("SC3")
> if (!requireNamespace("BiocManager", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("SC3", quietly = TRUE))
+   BiocManager::install("SC3")
> if (!requireNamespace("BiocManager", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("BiocManager", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("BiocManager", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("BiocManager", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("BiocManager", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("BiocManager", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("BiocManager", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("BiocManager", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("SC3", quietly = TRUE))
+   BiocManager::install("SC3")
> if (!requireNamespace("SC3", quietly = TRUE))
+   BiocManager::install("SC3")
> if (!requireNamespace("SC3", quietly = TRUE))
+   BiocManager::install("SC3")
> if (!requireNamespace("SC3", quietly = TRUE))
+   BiocManager::install("SC3")
> if (!requireNamespace("SC3", quietly = TRUE))
+   BiocManager::install("SC3")
> if (!requireNamespace("SC3", quietly = TRUE))
+   BiocManager::install("SC3")
> if (!requireNamespace("SC3", quietly = TRUE))
+   BiocManager::install("SC3")
> if (!requireNamespace("SC3", quietly = TRUE))
+   BiocManager::install("SC3")
> if (!requireNamespace("BiocManager", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("SC3", quietly = TRUE))
+   BiocManager::install("SC3")
> if (!requireNamespace("BiocManager", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("BiocManager", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("SC3", quietly = TRUE))
+   BiocManager::install("SC3")
> if (!requireNamespace("SC3", quietly = TRUE))
+   BiocManager::install("SC3")
>   install.packages("./SC3", repos = NULL, type = "source")
>   install.packages("./SC3", repos = NULL, type = "source")
>   install.packages("./SC3", repos = NULL, type = "source")
>   install.packages("./SC3", repos = NULL, type = "source")
>   install.packages("./SC3", repos = NULL, type = "source")
>   install.packages("./SC3", repos = NULL, type = "source")
>   install.packages("./SC3", repos = NULL, type = "source")
>   install.packages("./SC3", repos = NULL, type = "source")
>   install.packages("./SC3", repos = NULL, type = "source")
>   install.packages("./SC3", repos = NULL, type = "source")
>   install.packages("./SC3", repos = NULL, type = "source")
>   install.packages("./SC3", repos = NULL, type = "source")
>   install.packages("./SC3", repos = NULL, type = "source")
>   install.packages("./SC3", repos = NULL, type = "source")
>   install.packages("./SC3", repos = NULL, type = "source")
>   install.packages("./SC3", repos = NULL, type = "source")
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("mclust")
> if (!requireNamespace("Rtsne", quietly = TRUE))
+   install.packages("Rtsne")
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("SummarizedExperiment", quietly = TRUE))
+   BiocManager::install("SummarizedExperiment")
> if (!requireNamespace("SingleCellExperiment", quietly = TRUE))
+   BiocManager::install("SingleCellExperiment")
> if (!requireNamespace("stats", quietly = TRUE))
+   install.packages("stats")
> if (!requireNamespace("Rcpp", quietly = TRUE))
+   install.packages("Rcpp")
> if (!requireNamespace("cluster", quietly = TRUE))
+   install.packages("cluster")
> 
> library(mclust)
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("mclust")
> library(Rtsne)
> library(SummarizedExperiment)
> if (!requireNamespace("Rtsne", quietly = TRUE))
+   install.packages("Rtsne")
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("SummarizedExperiment", quietly = TRUE))
+   BiocManager::install("SummarizedExperiment")
> if (!requireNamespace("SingleCellExperiment", quietly = TRUE))
+   BiocManager::install("SingleCellExperiment")
> if (!requireNamespace("stats", quietly = TRUE))
+   install.packages("stats")
> if (!requireNamespace("Rcpp", quietly = TRUE))
+   install.packages("Rcpp")
> if (!requireNamespace("cluster", quietly = TRUE))
+   install.packages("cluster")
> 
> library(mclust)
> library(Rtsne)
> library(SummarizedExperiment)
make: Nothing to be done for `all'.
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("mclust")
> if (!requireNamespace("Rtsne", quietly = TRUE))
+   install.packages("Rtsne")
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("SummarizedExperiment", quietly = TRUE))
+   BiocManager::install("SummarizedExperiment")
> if (!requireNamespace("SingleCellExperiment", quietly = TRUE))
+   BiocManager::install("SingleCellExperiment")
> if (!requireNamespace("stats", quietly = TRUE))
+   install.packages("stats")
> if (!requireNamespace("Rcpp", quietly = TRUE))
+   install.packages("Rcpp")
> if (!requireNamespace("cluster", quietly = TRUE))
+   install.packages("cluster")
> 
> library(mclust)
> library(Rtsne)
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("mclust")
> library(SummarizedExperiment)
> if (!requireNamespace("Rtsne", quietly = TRUE))
+   install.packages("Rtsne")
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("SummarizedExperiment", quietly = TRUE))
+   BiocManager::install("SummarizedExperiment")
> if (!requireNamespace("SingleCellExperiment", quietly = TRUE))
+   BiocManager::install("SingleCellExperiment")
> if (!requireNamespace("stats", quietly = TRUE))
+   install.packages("stats")
> if (!requireNamespace("Rcpp", quietly = TRUE))
+   install.packages("Rcpp")
> if (!requireNamespace("cluster", quietly = TRUE))
+   install.packages("cluster")
> 
> library(mclust)
> library(Rtsne)
> library(SummarizedExperiment)
> library(SC3)
> library(SingleCellExperiment)
> # library(rlist)
> library(stats)
> library(Rcpp)
> library(cluster)
> sourceCpp("./cpp/wCorr_m.cpp")
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("mclust")
> library(SC3)
> if (!requireNamespace("Rtsne", quietly = TRUE))
+   install.packages("Rtsne")
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("SummarizedExperiment", quietly = TRUE))
+   BiocManager::install("SummarizedExperiment")
> if (!requireNamespace("SingleCellExperiment", quietly = TRUE))
+   BiocManager::install("SingleCellExperiment")
> if (!requireNamespace("stats", quietly = TRUE))
+   install.packages("stats")
> if (!requireNamespace("Rcpp", quietly = TRUE))
+   install.packages("Rcpp")
> if (!requireNamespace("cluster", quietly = TRUE))
+   install.packages("cluster")
> 
> library(mclust)
> library(Rtsne)
> library(SummarizedExperiment)
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("mclust")
> if (!requireNamespace("Rtsne", quietly = TRUE))
+   install.packages("Rtsne")
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("mclust")
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("SummarizedExperiment", quietly = TRUE))
+   BiocManager::install("SummarizedExperiment")
> if (!requireNamespace("SingleCellExperiment", quietly = TRUE))
+   BiocManager::install("SingleCellExperiment")
> if (!requireNamespace("stats", quietly = TRUE))
+   install.packages("stats")
> if (!requireNamespace("Rcpp", quietly = TRUE))
+   install.packages("Rcpp")
> if (!requireNamespace("cluster", quietly = TRUE))
+   install.packages("cluster")
> 
> library(mclust)
> library(SC3)
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("mclust")
> library(Rtsne)
> if (!requireNamespace("Rtsne", quietly = TRUE))
+   install.packages("Rtsne")
> library(SummarizedExperiment)
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("SummarizedExperiment", quietly = TRUE))
+   BiocManager::install("SummarizedExperiment")
> if (!requireNamespace("SingleCellExperiment", quietly = TRUE))
+   BiocManager::install("SingleCellExperiment")
> if (!requireNamespace("stats", quietly = TRUE))
+   install.packages("stats")
> if (!requireNamespace("Rcpp", quietly = TRUE))
+   install.packages("Rcpp")
> if (!requireNamespace("cluster", quietly = TRUE))
+   install.packages("cluster")
> 
> library(mclust)
> if (!requireNamespace("Rtsne", quietly = TRUE))
+   install.packages("Rtsne")
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("mclust")
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("SummarizedExperiment", quietly = TRUE))
+   BiocManager::install("SummarizedExperiment")
> if (!requireNamespace("SingleCellExperiment", quietly = TRUE))
+   BiocManager::install("SingleCellExperiment")
> if (!requireNamespace("stats", quietly = TRUE))
+   install.packages("stats")
> if (!requireNamespace("Rcpp", quietly = TRUE))
+   install.packages("Rcpp")
> if (!requireNamespace("cluster", quietly = TRUE))
+   install.packages("cluster")
> 
> library(mclust)
> library(Rtsne)
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("mclust")
> if (!requireNamespace("Rtsne", quietly = TRUE))
+   install.packages("Rtsne")
> library(Rtsne)
> library(SummarizedExperiment)
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("mclust")
> library(SummarizedExperiment)
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("SummarizedExperiment", quietly = TRUE))
+   BiocManager::install("SummarizedExperiment")
> if (!requireNamespace("SingleCellExperiment", quietly = TRUE))
+   BiocManager::install("SingleCellExperiment")
> if (!requireNamespace("stats", quietly = TRUE))
+   install.packages("stats")
> if (!requireNamespace("Rcpp", quietly = TRUE))
+   install.packages("Rcpp")
> if (!requireNamespace("cluster", quietly = TRUE))
+   install.packages("cluster")
> 
> library(mclust)
> if (!requireNamespace("Rtsne", quietly = TRUE))
+   install.packages("Rtsne")
> library(SC3)
> if (!requireNamespace("Rtsne", quietly = TRUE))
+   install.packages("Rtsne")
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("SummarizedExperiment", quietly = TRUE))
+   BiocManager::install("SummarizedExperiment")
> if (!requireNamespace("SingleCellExperiment", quietly = TRUE))
+   BiocManager::install("SingleCellExperiment")
> if (!requireNamespace("stats", quietly = TRUE))
+   install.packages("stats")
> if (!requireNamespace("Rcpp", quietly = TRUE))
+   install.packages("Rcpp")
> if (!requireNamespace("cluster", quietly = TRUE))
+   install.packages("cluster")
> 
> library(mclust)
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("mclust")
> library(Rtsne)
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("SummarizedExperiment", quietly = TRUE))
+   BiocManager::install("SummarizedExperiment")
> if (!requireNamespace("SingleCellExperiment", quietly = TRUE))
+   BiocManager::install("SingleCellExperiment")
> if (!requireNamespace("stats", quietly = TRUE))
+   install.packages("stats")
> if (!requireNamespace("Rcpp", quietly = TRUE))
+   install.packages("Rcpp")
> if (!requireNamespace("cluster", quietly = TRUE))
+   install.packages("cluster")
> 
> library(mclust)
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("mclust")
> library(SummarizedExperiment)
> library(Rtsne)
> if (!requireNamespace("Rtsne", quietly = TRUE))
+   install.packages("Rtsne")
make: Nothing to be done for `all'.
> library(SummarizedExperiment)
> library(Rtsne)
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("SummarizedExperiment", quietly = TRUE))
+   BiocManager::install("SummarizedExperiment")
> if (!requireNamespace("SingleCellExperiment", quietly = TRUE))
+   BiocManager::install("SingleCellExperiment")
> if (!requireNamespace("stats", quietly = TRUE))
+   install.packages("stats")
> if (!requireNamespace("Rcpp", quietly = TRUE))
+   install.packages("Rcpp")
> if (!requireNamespace("cluster", quietly = TRUE))
+   install.packages("cluster")
> 
> library(mclust)
> if (!requireNamespace("Rtsne", quietly = TRUE))
+   install.packages("Rtsne")
> library(SummarizedExperiment)
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("SummarizedExperiment", quietly = TRUE))
+   BiocManager::install("SummarizedExperiment")
> if (!requireNamespace("SingleCellExperiment", quietly = TRUE))
+   BiocManager::install("SingleCellExperiment")
> if (!requireNamespace("stats", quietly = TRUE))
+   install.packages("stats")
> if (!requireNamespace("Rcpp", quietly = TRUE))
+   install.packages("Rcpp")
> if (!requireNamespace("cluster", quietly = TRUE))
+   install.packages("cluster")
> 
> library(mclust)
> library(Rtsne)
> library(SummarizedExperiment)
> library(Rtsne)
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("mclust")
> library(SummarizedExperiment)
> if (!requireNamespace("Rtsne", quietly = TRUE))
+   install.packages("Rtsne")
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("SummarizedExperiment", quietly = TRUE))
+   BiocManager::install("SummarizedExperiment")
> if (!requireNamespace("SingleCellExperiment", quietly = TRUE))
+   BiocManager::install("SingleCellExperiment")
> if (!requireNamespace("stats", quietly = TRUE))
+   install.packages("stats")
> if (!requireNamespace("Rcpp", quietly = TRUE))
+   install.packages("Rcpp")
> if (!requireNamespace("cluster", quietly = TRUE))
+   install.packages("cluster")
> 
> library(mclust)
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("mclust")
> library(Rtsne)
> library(SummarizedExperiment)
> if (!requireNamespace("Rtsne", quietly = TRUE))
+   install.packages("Rtsne")
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("SummarizedExperiment", quietly = TRUE))
+   BiocManager::install("SummarizedExperiment")
> if (!requireNamespace("SingleCellExperiment", quietly = TRUE))
+   BiocManager::install("SingleCellExperiment")
> if (!requireNamespace("stats", quietly = TRUE))
+   install.packages("stats")
> if (!requireNamespace("Rcpp", quietly = TRUE))
+   install.packages("Rcpp")
> if (!requireNamespace("cluster", quietly = TRUE))
+   install.packages("cluster")
> 
> library(mclust)
> library(Rtsne)
> library(SC3)
> library(SummarizedExperiment)
> library(SC3)
> library(SC3)
> library(SC3)
> library(SC3)
> library(SC3)
> library(SC3)
> library(SC3)
> library(SC3)
> library(SC3)
> library(SC3)
> sourceCpp("./cpp/solver.cpp")
> 
> #Compute ARI for each possibility
> eval_alg <- function(X, X_log, labels, num_clusters,threshold) {
+   start_time <- Sys.time()
+   distances <- list()
+   names <- c()
+   names <- c(names, "Spearman")
+   distances <-list(w_cor_dist_m(X_log, rowVars(X_log)))
+   names(distances) <- names
+ 
+   sce <- SingleCellExperiment(
+     assays = list(
+       counts = as.matrix(X),
+       logcounts = X_log
+     ),
+     colData = labels
+   )
+   rowData(sce)$feature_symbol <- rownames(sce)
+   sce <- sc3_prepare(sce, gene_filter = FALSE)
+ 
+   metadata(sce)$sc3$distances <- distances
+   sce <- sc3_calc_transfs(sce)
+   sce <- sc3_kmeans(sce, num_clusters, TRUE)
+   sce <- sc3_calc_consens(sce)
+ 
+   # Get consensus matrix from the SC3
+   cm <- eval(parse(text=paste("metadata(sce)$sc3$consensus$'", toString(num_clusters), "'$consensus", sep="")))
+ 
+   # Remove diagonal entries
+   cm <- cm - diag(nrow(cm))
+ 
+   cm[cm < threshold] <- 0
+   cm2 <- t(apply((cm), 2,  # Normalize the entries to get weighted average
+                  function(i) i/sum(i)))
+ 
+   # Replace NA values with 0
+   cm2[is.na(cm2)] <- 0
+ 
+   xlog_t = t(X_log)
+   x_imp <- xlog_t
+   # print(c(nrow(x_imp),ncol(x_imp)))
+ 
+   t2 = x_imp == 0
+   x_t_vote <- x_imp
+ 
+   x_t_vote[t2] <- -1
+   x_t_vote[x_imp > 0] <- 1
+ 
+   #compute votes - majority wins - negative means an actual 0, otherwise it is some positive value
+   votes <- matrix(0L, nrow = nrow(x_imp), ncol = ncol(x_imp))
+   votes[t2] <- (cm2 %*% x_t_vote)[t2]
+ 
+   t3 <- votes > 0
+   x_imp <- solve_dropouts(cm2, x_imp, which(t3, arr.ind = TRUE))
+ 
+   end_time <- Sys.time()
+ 
+   print("Imputation finished")
+   xlog_t[t3] <- x_imp[t3]
+ 
+   p <- 30
+ 
+   if (ncol(t(as.matrix(xlog_t))) <= p*2){
+     p <- 9
+   }
+ 
+   cells <- ncol(X)
+   if(cells > 1000){
+     print("Reducing rank")
+     pca_red <- prcomp(as.matrix(xlog_t), rank. = 500)$x
+     tsne_red <- Rtsne(pca_red, perplexity = p, check_duplicates = FALSE)$Y
+     restarts <- 50
+ 
+   }
+   else{
+     pca_red <- prcomp(as.matrix(xlog_t))$x
+     tsne_red <- Rtsne(as.matrix(xlog_t), perplexity = p, check_duplicates = FALSE)$Y
+     restarts <- 1000
+   }
+ 
+   c1 = adjustedRandIndex(kmeans(
+     pca_red,
+     centers = num_clusters,
+     iter.max = 1e+09,
+     nstart = restarts
+   )$cluster,
+   labels)
+ 
+   print("PCA kmeans finished")
+ 
+ 
+ 
+   #tsne/kmeans
+   c2 = adjustedRandIndex(kmeans(
+     tsne_red,
+     centers = num_clusters,
+     iter.max = 1e+09,
+     nstart = restarts
+   )$cluster,
+   labels)
+   print("tsne kmeans finished")
+ 
+ 
+   c0 = adjustedRandIndex(eval(parse(text=paste("colData(sce)$sc3", toString(num_clusters), "clusters", sep="_"))),
+                          labels)
+ 
+ 
+   prop_zeros_removed <- 1.00-(sum(xlog_t==0))/sum(X_log==0)
+ 
+   pca_dist <- as.matrix(stats::dist(pca_red, method = "euclidean", diag = TRUE, upper = TRUE))
+ 
+   int_labels <- as.numeric((as.factor(labels)))
+ 
+   silh_pca <- silhouette(int_labels, pca_dist)
+   silh_pca_avr <- as.numeric(summary(silh_pca)['avg.width'])
+ 
+   return(c(c0, c1, c2, difftime(end_time, start_time, units="secs") , prop_zeros_removed, silh_pca_avr, threshold))
+ }
> 
> 
> driver <- function(filename, repeats, threshold){
+   dataset_names <- list("blakeley")
+   # dataset_names <-list("blakeley", "deng", "pollen","darmanis", "segerstolpe")
+   
+   
+   
+   for(i in 1:length(dataset_names)){
+     dataset = dataset_names[[i]]
+     sce <- readRDS(file = paste("./datasets/", dataset, ".rds", sep=""))
+     
+     X <- assays(sce)$counts
+     X_log <- assays(sce)$logcounts
+     
+     print(paste(dataset, "Genes(rows):", nrow(X), "Cells(cols):", ncol(X), sep=" "))
+     
+     # colnames(X) <- colnames(X, do.NULL = FALSE, prefix = "col")
+     labels<-if(is.null(colData(sce)$cell_type2)) colData(sce)$cell_type1 else colData(sce)$cell_type2
+     row_sums <- rowSums(X[,-1])
+     X <- X[row_sums>0,] # remove genes that are not expressed at all
+     X_log <- X_log[row_sums>0,] # remove genes that are not expressed at all
+     
+     num_clusters = length(unique(labels))
+     
+     data_aris <- replicate(repeats, eval_alg(X, X_log, labels, num_clusters,threshold))
+     
+     means <- rowMeans(data_aris)
+     stdevs <- rowSds(data_aris)
+     
+     print(c("Clustering results: ", dataset))
+     print(means)
+     print(stdevs)
+     fileConn<-eval(parse(text=paste('file("./results/', "ccimpute_", dataset, '_', filename, '_', repeats, '_', threshold, 'txt")', sep="")))
+     writeLines(c(paste(dataset, "Genes(rows):", nrow(X), "Cells(cols):", ncol(X), "clusters: ", num_clusters, sep=" "), means, stdevs), fileConn)
+     close(fileConn)
+   }
+   print(sum)
+ }
> 
> # driver("slow-65", 1, .50)
> # driver("slow-65", 1, .55)
> # driver("slow-65", 1, .60)
> driver("fast-95", 1, .95)
[1] "blakeley Genes(rows): 16862 Cells(cols): 30"
starting worker pid=58742 on localhost:11080 at 21:59:23.946
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("mclust")
> if (!requireNamespace("Rtsne", quietly = TRUE))
+   install.packages("Rtsne")
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("mclust", quietly = TRUE))
+   install.packages("BiocManager")
> if (!requireNamespace("SummarizedExperiment", quietly = TRUE))
+   BiocManager::install("SummarizedExperiment")
> if (!requireNamespace("SingleCellExperiment", quietly = TRUE))
+   BiocManager::install("SingleCellExperiment")
> if (!requireNamespace("stats", quietly = TRUE))
+   install.packages("stats")
> if (!requireNamespace("Rcpp", quietly = TRUE))
+   install.packages("Rcpp")
> if (!requireNamespace("cluster", quietly = TRUE))
+   install.packages("cluster")
> 
> library(mclust)
> library(Rtsne)
> library(SummarizedExperiment)
> library(SC3)
> library(SingleCellExperiment)
> # library(rlist)
> library(stats)
> library(Rcpp)
> library(cluster)
> sourceCpp("./cpp/wCorr_m.cpp")
> sourceCpp("./cpp/solver.cpp")
> 
> #Compute ARI for each possibility
> eval_alg <- function(X, X_log, labels, num_clusters,threshold) {
+   start_time <- Sys.time()
+   distances <- list()
+   names <- c()
+   names <- c(names, "Spearman")
+   distances <-list(w_cor_dist_m(X_log, rowVars(X_log)))
+   names(distances) <- names
+ 
+   sce <- SingleCellExperiment(
+     assays = list(
+       counts = as.matrix(X),
+       logcounts = X_log
+     ),
+     colData = labels
+   )
+   rowData(sce)$feature_symbol <- rownames(sce)
+   sce <- sc3_prepare(sce, gene_filter = FALSE)
+ 
+   metadata(sce)$sc3$distances <- distances
+   sce <- sc3_calc_transfs(sce)
+   sce <- sc3_kmeans(sce, num_clusters, TRUE)
+   sce <- sc3_calc_consens(sce)
+ 
+   # Get consensus matrix from the SC3
+   cm <- eval(parse(text=paste("metadata(sce)$sc3$consensus$'", toString(num_clusters), "'$consensus", sep="")))
+ 
+   # Remove diagonal entries
+   cm <- cm - diag(nrow(cm))
+ 
+   cm[cm < threshold] <- 0
+   cm2 <- t(apply((cm), 2,  # Normalize the entries to get weighted average
+                  function(i) i/sum(i)))
+ 
+   # Replace NA values with 0
+   cm2[is.na(cm2)] <- 0
+ 
+   xlog_t = t(X_log)
+   x_imp <- xlog_t
+   # print(c(nrow(x_imp),ncol(x_imp)))
+ 
+   t2 = x_imp == 0
+   x_t_vote <- x_imp
+ 
+   x_t_vote[t2] <- -1
+   x_t_vote[x_imp > 0] <- 1
+ 
+   #compute votes - majority wins - negative means an actual 0, otherwise it is some positive value
+   votes <- matrix(0L, nrow = nrow(x_imp), ncol = ncol(x_imp))
+   votes[t2] <- (cm2 %*% x_t_vote)[t2]
+ 
+   t3 <- votes > 0
+   x_imp <- solve_dropouts(cm2, x_imp, which(t3, arr.ind = TRUE))
+ 
+   end_time <- Sys.time()
+ 
+   print("Imputation finished")
+   xlog_t[t3] <- x_imp[t3]
+ 
+   p <- 30
+ 
+   if (ncol(t(as.matrix(xlog_t))) <= p*2){
+     p <- 9
+   }
+ 
+   cells <- ncol(X)
+   if(cells > 1000){
+     print("Reducing rank")
+     pca_red <- prcomp(as.matrix(xlog_t), rank. = 500)$x
+     tsne_red <- Rtsne(pca_red, perplexity = p, check_duplicates = FALSE)$Y
+     restarts <- 50
+ 
+   }
+   else{
+     pca_red <- prcomp(as.matrix(xlog_t))$x
+     tsne_red <- Rtsne(as.matrix(xlog_t), perplexity = p, check_duplicates = FALSE)$Y
+     restarts <- 1000
+   }
+ 
+   c1 = adjustedRandIndex(kmeans(
+     pca_red,
+     centers = num_clusters,
+     iter.max = 1e+09,
+     nstart = restarts
+   )$cluster,
+   labels)
+ 
+   print("PCA kmeans finished")
+ 
+ 
+ 
+   #tsne/kmeans
+   c2 = adjustedRandIndex(kmeans(
+     tsne_red,
+     centers = num_clusters,
+     iter.max = 1e+09,
+     nstart = restarts
+   )$cluster,
+   labels)
+   print("tsne kmeans finished")
+ 
+ 
+   c0 = adjustedRandIndex(eval(parse(text=paste("colData(sce)$sc3", toString(num_clusters), "clusters", sep="_"))),
+                          labels)
+ 
+ 
+   prop_zeros_removed <- 1.00-(sum(xlog_t==0))/sum(X_log==0)
+ 
+   pca_dist <- as.matrix(stats::dist(pca_red, method = "euclidean", diag = TRUE, upper = TRUE))
+ 
+   int_labels <- as.numeric((as.factor(labels)))
+ 
+   silh_pca <- silhouette(int_labels, pca_dist)
+   silh_pca_avr <- as.numeric(summary(silh_pca)['avg.width'])
+ 
+   return(c(c0, c1, c2, difftime(end_time, start_time, units="secs") , prop_zeros_removed, silh_pca_avr, threshold))
+ }
> 
> 
> driver <- function(filename, repeats, threshold){
+   dataset_names <- list("blakeley")
+   # dataset_names <-list("blakeley", "deng", "pollen","darmanis", "segerstolpe")
+   
+   
+   
+   for(i in 1:length(dataset_names)){
+     dataset = dataset_names[[i]]
+     sce <- readRDS(file = paste("./datasets/", dataset, ".rds", sep=""))
+     
+     X <- assays(sce)$counts
+     X_log <- assays(sce)$logcounts
+     
+     print(paste(dataset, "Genes(rows):", nrow(X), "Cells(cols):", ncol(X), sep=" "))
+     
+     # colnames(X) <- colnames(X, do.NULL = FALSE, prefix = "col")
+     labels<-if(is.null(colData(sce)$cell_type2)) colData(sce)$cell_type1 else colData(sce)$cell_type2
+     row_sums <- rowSums(X[,-1])
+     X <- X[row_sums>0,] # remove genes that are not expressed at all
+     X_log <- X_log[row_sums>0,] # remove genes that are not expressed at all
+     
+     num_clusters = length(unique(labels))
+     
+     data_aris <- replicate(repeats, eval_alg(X, X_log, labels, num_clusters,threshold))
+     
+     means <- rowMeans(data_aris)
+     stdevs <- rowSds(data_aris)
+     
+     print(c("Clustering results: ", dataset))
+     print(means)
+     print(stdevs)
+     fileConn<-eval(parse(text=paste('file("./results/', "ccimpute_", dataset, '_', filename, '_', repeats, '_', threshold, 'txt")', sep="")))
+     writeLines(c(paste(dataset, "Genes(rows):", nrow(X), "Cells(cols):", ncol(X), "clusters: ", num_clusters, sep=" "), means, stdevs), fileConn)
+     close(fileConn)
+   }
+   print(sum)
+ }
> 
> # driver("slow-65", 1, .50)
> # driver("slow-65", 1, .55)
> # driver("slow-65", 1, .60)
> driver("fast-95", 1, .95)
[1] "blakeley Genes(rows): 16862 Cells(cols): 30"
starting worker pid=58956 on localhost:11162 at 21:59:47.309
starting worker pid=58983 on localhost:11162 at 21:59:58.907
starting worker pid=58978 on localhost:11162 at 21:59:59.021
starting worker pid=58995 on localhost:11162 at 21:59:59.023
starting worker pid=58991 on localhost:11162 at 21:59:59.024
starting worker pid=58992 on localhost:11162 at 21:59:59.051
starting worker pid=58982 on localhost:11162 at 21:59:59.053
starting worker pid=58975 on localhost:11162 at 21:59:59.056
starting worker pid=58980 on localhost:11162 at 21:59:59.066
starting worker pid=58976 on localhost:11162 at 21:59:58.980
starting worker pid=58993 on localhost:11162 at 21:59:58.988
starting worker pid=58979 on localhost:11162 at 21:59:59.069
starting worker pid=58984 on localhost:11162 at 21:59:59.071
starting worker pid=58990 on localhost:11162 at 21:59:59.077
starting worker pid=58996 on localhost:11162 at 21:59:59.007
starting worker pid=58977 on localhost:11162 at 21:59:59.015
starting worker pid=58987 on localhost:11162 at 21:59:59.108
starting worker pid=58994 on localhost:11162 at 21:59:59.029
starting worker pid=58985 on localhost:11162 at 21:59:59.038
starting worker pid=58986 on localhost:11162 at 21:59:59.153
starting worker pid=58989 on localhost:11162 at 21:59:59.082
starting worker pid=58988 on localhost:11162 at 21:59:59.220
starting worker pid=58981 on localhost:11162 at 21:59:59.149
starting worker pid=58997 on localhost:11162 at 21:59:59.243
  |                                                                              |                                                                      |   0%  |                                                                              |===================================                                   |  50%  |                                                                              |======================================================================| 100%